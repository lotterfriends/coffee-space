// Generated by CoffeeScript 1.4.0
(function() {
  var Bullet, Explosion, Game, Keys, Opponent, Player,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Bullet = (function() {

    function Bullet($boardNode, position) {
      this.$boardNode = $boardNode;
      this.position = position;
      this.dead = false;
      this.$bulletNode = this.create();
      this.speed = 5;
    }

    Bullet.prototype.create = function() {
      var $bulletNode;
      $bulletNode = $("<div class='bullet'>").appendTo(this.$boardNode.closest(".game"));
      $bulletNode.css("left", this.position.left);
      $bulletNode.css("top", this.position.top);
      return $bulletNode;
    };

    Bullet.prototype.destroy = function() {
      if (this.$bulletNode.length) {
        this.$bulletNode.remove();
      }
      return this.dead = true;
    };

    Bullet.prototype.move = function() {
      if (this.$bulletNode.length) {
        return this.$bulletNode.css("top", (this.$bulletNode.offset().top - this.speed) + "px");
      }
    };

    return Bullet;

  })();

  Explosion = (function() {

    function Explosion($boardNode, position) {
      this.$boardNode = $boardNode;
      this.position = position;
      this.picture = "./img/explosion.gif";
      this.$explosionNode = this.create();
      this.destroy();
    }

    Explosion.prototype.create = function() {
      var $explosionNode, repeatStamp;
      repeatStamp = "?" + new Date().valueOf();
      $explosionNode = $("<img class='explosion' src='" + this.picture + repeatStamp + "'>").appendTo(this.$boardNode);
      $explosionNode.css("left", this.position.left + "px");
      $explosionNode.css("top", this.position.top + "px");
      return $explosionNode;
    };

    Explosion.prototype.destroy = function() {
      var _this = this;
      return setTimeout(function() {
        return _this.$explosionNode.hide('slow').remove();
      }, 1000);
    };

    return Explosion;

  })();

  Game = (function() {
    var myRequestAnimationFrame;

    myRequestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
      return setTimeout(callback, 1000 / 60);
    };

    function Game($game) {
      this.$boardNode = $game.find('.board');
      this.$levelNode = $game.find('.level span');
      this.$shotCountNode = $game.find('.shotCount span');
      this.$textNode = $game.find('.text');
      this.speed = 40;
      this.level = 1;
      this.levelTime = 20000;
      this.moveFactor = 5;
      this.pause = false;
      this.gameOver = false;
      this.player = new Player($game, this.$boardNode);
      this.bullets = [];
      this.opponents = [];
    }

    Game.prototype.start = function() {
      this.initKeyListener();
      this.initMouseListener();
      this.increaseLevel();
      return this.run();
    };

    Game.prototype.initKeyListener = function() {
      var _this = this;
      return $(window).on('keydown', function(e) {
        switch (e.keyCode) {
          case Keys.ESC:
            e.preventDefault();
            return location.reload();
          case Keys.SPACE:
            if (_this.gameOver) {
              return;
            }
            e.preventDefault();
            return _this.pause = !_this.pause;
        }
      });
    };

    Game.prototype.initMouseListener = function() {
      var _this = this;
      $(window).on('mousemove.movePlayer', function(e) {
        if (_this.gameOver || _this.pause) {
          return;
        }
        return _this.player.move(e.pageX);
      });
      return $(window).bind('click.shot', function(e) {
        if (_this.gameOver || _this.pause) {
          return;
        }
        _this.bullets.push(_this.player.shot(e.pageX));
        e.preventDefault();
        return e.stopPropagation();
      });
    };

    Game.prototype.increaseLevel = function() {
      var _this = this;
      return setInterval(function() {
        if (_this.gameOver || _this.pause) {
          return;
        }
        _this.level++;
        return _this.$levelNode.html(_this.level);
      }, this.levelTime);
    };

    Game.prototype.spawnOpponents = function() {
      if (Math.round(Math.random() * 50) <= this.level) {
        return this.opponents.push(new Opponent(this.$boardNode));
      }
    };

    Game.prototype.moveBackground = function() {
      var css, old;
      old = this.$boardNode.css("background-position").split(" ")[1];
      old = Number(old.replace("px", ""));
      old++;
      css = "50% " + old + "px";
      return this.$boardNode.css("background-position", css);
    };

    Game.prototype.moveOpponents = function() {
      var i, opponent, _i, _len, _ref, _results;
      _ref = this.opponents;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        opponent = _ref[i];
        if (opponent && opponent.$opponentNode && opponent.$opponentNode.length && (this.$boardNode.offset().top + opponent.$opponentNode.offset().top) - opponent.$opponentNode.height() >= this.$boardNode.height() + this.$boardNode.offset().top) {
          this.gameOver = true;
          opponent.destroy();
          _results.push(this.opponents.remove(i));
        } else {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (i = _j = 0, _ref1 = this.moveFactor; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              if (opponent) {
                _results1.push(opponent.move());
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
      }
      return _results;
    };

    Game.prototype.moveBullets = function() {
      var bullet, i, _i, _len, _ref, _results;
      _ref = this.bullets;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        bullet = _ref[i];
        if (bullet && bullet.$bulletNode && bullet.$bulletNode.length && bullet.$bulletNode.offset().top < this.$boardNode.offset().top) {
          bullet.destroy();
          this.bullets.remove(i);
          continue;
        } else {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (i = _j = 0, _ref1 = this.moveFactor; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              if (bullet) {
                _results1.push(bullet.move());
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
      }
      return _results;
    };

    Game.prototype.increaseShotCount = function() {
      var current;
      current = Number(this.$shotCountNode.text());
      current++;
      return this.$shotCountNode.html(current);
    };

    Game.prototype.collision = function() {
      var bullet, i, j, opponent, _i, _len, _ref, _results;
      _ref = this.opponents;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        opponent = _ref[i];
        if (!opponent || opponent.dead || !opponent.$opponentNode || !opponent.$opponentNode.length) {
          this.opponents.remove(i);
          continue;
        }
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.bullets;
          _results1 = [];
          for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
            bullet = _ref1[j];
            if (!bullet || bullet.dead) {
              this.bullets.remove(j);
              continue;
            }
            if (opponent.$opponentNode.collidesWith(bullet.$bulletNode).length) {
              opponent.destroy();
              bullet.destroy();
              this.opponents.remove(i);
              this.bullets.remove(j);
              _results1.push(this.increaseShotCount());
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Game.prototype.isGameOverOrPause = function() {
      if (this.pause) {
        this.$textNode.find(".pause").show();
      } else {
        this.$textNode.find(".pause").hide();
      }
      if (this.gameOver) {
        this.$textNode.find(".over").show("slow");
      }
      return this.pause || this.gameOver;
    };

    Game.prototype.run = function() {
      var _this = this;
      if (!this.isGameOverOrPause()) {
        this.spawnOpponents();
        this.moveBackground();
        this.moveOpponents();
        this.moveBullets();
        this.collision();
      }
      setTimeout(function() {
        return myRequestAnimationFrame(_this.run.bind(_this));
      }, this.speed);
    };

    return Game;

  })();

  Keys = {
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    POS1: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34
  };

  Opponent = (function() {

    function Opponent($boardNode) {
      this.$boardNode = $boardNode;
      this.move = __bind(this.move, this);

      this.destroy = __bind(this.destroy, this);

      this.findPosition = __bind(this.findPosition, this);

      this.create = __bind(this.create, this);

      this.dead = false;
      this.$opponentNode = this.create();
    }

    Opponent.prototype.create = function() {
      var $opponentNode;
      $opponentNode = $("<div class='opponent'>").appendTo(this.$boardNode);
      $opponentNode.css('left', this.findPosition($opponentNode) + 'px');
      return $opponentNode;
    };

    Opponent.prototype.findPosition = function($node) {
      var left, range;
      range = (Math.round((this.$boardNode.width() - (this.$boardNode.offset().left * 2)) / $node.width()) * $node.width()) * -1;
      left = Math.round(Math.random() * range);
      left = this.$boardNode.offset().left + left;
      if (left > this.$boardNode.offset().left + this.$boardNode.width() - $node.width()) {
        return this.findPosition($node);
      }
      return left;
    };

    Opponent.prototype.destroy = function() {
      if (this.$opponentNode.length) {
        new Explosion(this.$boardNode, this.$opponentNode.offset());
        this.$opponentNode.remove();
        return this.dead = true;
      }
    };

    Opponent.prototype.move = function() {
      if (this.dead) {
        return;
      }
      return this.$opponentNode.css("margin-top", "+=1px");
    };

    return Opponent;

  })();

  Player = (function() {

    function Player($gameNode, $boardNode) {
      this.$gameNode = $gameNode;
      this.$boardNode = $boardNode;
      this.$playerNode = this.$gameNode.find('.player:eq(0)');
    }

    Player.prototype.move = function(left) {
      if (left < this.$boardNode.offset().left) {
        return;
      }
      if (left > this.$boardNode.offset().left + this.$boardNode.width() - this.$playerNode.width()) {
        return;
      }
      return this.$playerNode.css("left", left + "px");
    };

    Player.prototype.shot = function() {
      var position;
      position = {
        left: this.$playerNode.offset().left + (this.$playerNode.width() / 2),
        top: this.$playerNode.offset().top
      };
      return new Bullet(this.$boardNode, position);
    };

    return Player;

  })();

  $(function() {
    var game;
    game = new Game($('.game'));
    return game.start();
  });

}).call(this);
